//----------------------------------------------------------
// name: "vocoder"
//
// Code generated with Faust 2.11.10 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif
#include <math.h>
#include <algorithm>

#include <faust/gui/UI.h>
#include <faust/gui/meta.h>
#include <faust/dsp/dsp.h>

using std::max;
using std::min;

/********************************
	VECTOR INTRINSICS
*********************************/


/********************************
	ABSTRACT USER INTERFACE
*********************************/

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS faust_vocoder
#endif

class faust_vocoder : public dsp {
  private:
	float 	fTempPerm0;
	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	FAUSTFLOAT 	fslider1;
	float 	fRec3[2];
	float 	fTempPerm1;
	float 	fConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fRec7[3];
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fTempPerm2;
	float 	fConst10;
	float 	fConst11;
	float 	fRec6[2];
	float 	fRec5[2];
	int 	iTempPerm3;
	int 	iVec0[2];
	int 	iConst12;
	int 	iRec8[2];
	float 	fRec2[2];
	float 	fConst13;
	FAUSTFLOAT 	fslider2;
	float 	fConst14;
	float 	fTempPerm4;
	float 	fTempPerm5;
	int 	iTempPerm6;
	float 	fRec10[2];
	int 	iRec12[2];
	FAUSTFLOAT 	fslider3;
	float 	fRec13[2];
	float 	fTempPerm7;
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fbutton0;
	int 	iRec15[2];
	int 	iTempPerm8;
	float 	fConst15;
	float 	fTempPerm9;
	FAUSTFLOAT 	fslider7;
	float 	fRec14[2];
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	float 	fTempPerm10;
	float 	fTempPerm11;
	int 	iTempPerm12;
	float 	fRec16[2];
	FAUSTFLOAT 	fbutton1;
	int 	iRec19[2];
	int 	iTempPerm13;
	float 	fTempPerm14;
	float 	fRec18[2];
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	float 	fTempPerm15;
	float 	fTempPerm16;
	int 	iTempPerm17;
	float 	fRec20[2];
	FAUSTFLOAT 	fbutton2;
	int 	iRec23[2];
	int 	iTempPerm18;
	float 	fTempPerm19;
	float 	fRec22[2];
	FAUSTFLOAT 	fslider12;
	FAUSTFLOAT 	fslider13;
	float 	fTempPerm20;
	float 	fTempPerm21;
	int 	iTempPerm22;
	float 	fRec24[2];
	FAUSTFLOAT 	fbutton3;
	int 	iRec27[2];
	int 	iTempPerm23;
	float 	fTempPerm24;
	float 	fRec26[2];
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	float 	fTempPerm25;
	float 	fTempPerm26;
	int 	iTempPerm27;
	float 	fRec28[2];
	FAUSTFLOAT 	fbutton4;
	int 	iRec31[2];
	int 	iTempPerm28;
	float 	fTempPerm29;
	float 	fRec30[2];
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fslider17;
	float 	fTempPerm30;
	float 	fTempPerm31;
	int 	iTempPerm32;
	float 	fRec32[2];
	FAUSTFLOAT 	fbutton5;
	int 	iRec35[2];
	int 	iTempPerm33;
	float 	fTempPerm34;
	float 	fRec34[2];
	FAUSTFLOAT 	fslider18;
	float 	fTempPerm35;
	float 	fRec9[3];
	float 	fConst16;
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fRec41[3];
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fTempPerm36;
	float 	fRec40[2];
	float 	fRec39[2];
	int 	iTempPerm37;
	int 	iVec1[2];
	int 	iRec42[2];
	float 	fRec37[2];
	float 	fConst25;
	float 	fRec43[3];
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fRec49[3];
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fTempPerm38;
	float 	fRec48[2];
	float 	fRec47[2];
	int 	iTempPerm39;
	int 	iVec2[2];
	int 	iRec50[2];
	float 	fRec45[2];
	float 	fConst35;
	float 	fRec51[3];
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fRec57[3];
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fTempPerm40;
	float 	fRec56[2];
	float 	fRec55[2];
	int 	iTempPerm41;
	int 	iVec3[2];
	int 	iRec58[2];
	float 	fRec53[2];
	float 	fConst45;
	float 	fRec59[3];
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fRec65[3];
	float 	fConst52;
	float 	fConst53;
	float 	fTempPerm42;
	float 	fRec64[2];
	float 	fRec63[2];
	int 	iTempPerm43;
	int 	iVec4[2];
	int 	iRec66[2];
	float 	fRec61[2];
	float 	fRec67[3];
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fRec73[3];
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fTempPerm44;
	float 	fRec72[2];
	float 	fRec71[2];
	int 	iTempPerm45;
	int 	iVec5[2];
	int 	iRec74[2];
	float 	fRec69[2];
	float 	fConst63;
	float 	fRec75[3];
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fRec81[3];
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fTempPerm46;
	float 	fRec80[2];
	float 	fRec79[2];
	int 	iTempPerm47;
	int 	iVec6[2];
	int 	iRec82[2];
	float 	fRec77[2];
	float 	fConst73;
	float 	fRec83[3];
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fRec89[3];
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fTempPerm48;
	float 	fRec88[2];
	float 	fRec87[2];
	int 	iTempPerm49;
	int 	iVec7[2];
	int 	iRec90[2];
	float 	fRec85[2];
	float 	fConst83;
	float 	fRec91[3];
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fRec97[3];
	float 	fConst90;
	float 	fConst91;
	float 	fTempPerm50;
	float 	fRec96[2];
	float 	fRec95[2];
	int 	iTempPerm51;
	int 	iVec8[2];
	int 	iRec98[2];
	float 	fRec93[2];
	float 	fRec99[3];
	float 	fConst92;
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fRec105[3];
	float 	fConst98;
	float 	fConst99;
	float 	fConst100;
	float 	fTempPerm52;
	float 	fRec104[2];
	float 	fRec103[2];
	int 	iTempPerm53;
	int 	iVec9[2];
	int 	iRec106[2];
	float 	fRec101[2];
	float 	fConst101;
	float 	fRec107[3];
	float 	fConst102;
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fConst107;
	float 	fRec113[3];
	float 	fConst108;
	float 	fConst109;
	float 	fConst110;
	float 	fTempPerm54;
	float 	fRec112[2];
	float 	fRec111[2];
	int 	iTempPerm55;
	int 	iVec10[2];
	int 	iRec114[2];
	float 	fRec109[2];
	float 	fConst111;
	float 	fRec115[3];
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fRec121[3];
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fTempPerm56;
	float 	fRec120[2];
	float 	fRec119[2];
	int 	iTempPerm57;
	int 	iVec11[2];
	int 	iRec122[2];
	float 	fRec117[2];
	float 	fConst121;
	float 	fRec123[3];
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fRec129[3];
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fTempPerm58;
	float 	fRec128[2];
	float 	fRec127[2];
	int 	iTempPerm59;
	int 	iVec12[2];
	int 	iRec130[2];
	float 	fRec125[2];
	float 	fConst131;
	float 	fRec131[3];
	float 	fConst132;
	float 	fConst133;
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fRec137[3];
	float 	fConst138;
	float 	fConst139;
	float 	fConst140;
	float 	fTempPerm60;
	float 	fRec136[2];
	float 	fRec135[2];
	int 	iTempPerm61;
	int 	iVec13[2];
	int 	iRec138[2];
	float 	fRec133[2];
	float 	fConst141;
	float 	fRec139[3];
	float 	fConst142;
	float 	fConst143;
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fRec145[3];
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fTempPerm62;
	float 	fRec144[2];
	float 	fRec143[2];
	int 	iTempPerm63;
	int 	iVec14[2];
	int 	iRec146[2];
	float 	fRec141[2];
	float 	fConst151;
	float 	fRec147[3];
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fRec153[3];
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fTempPerm64;
	float 	fRec152[2];
	float 	fRec151[2];
	int 	iTempPerm65;
	int 	iVec15[2];
	int 	iRec154[2];
	float 	fRec149[2];
	float 	fConst161;
	float 	fRec155[3];
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("filename", "vocoder");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("misceffects.lib/name", "Faust Math Library");
		m->declare("misceffects.lib/version", "2.0");
		m->declare("name", "vocoder");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = tanf((14313.096129755097f / fConst0));
		fConst2 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst1))));
		fConst3 = (1.0f / fConst1);
		fConst4 = (((fConst3 + -0.23156188491374319f) / fConst1) + 1.0f);
		fConst5 = (((fConst3 + 0.23156188491374319f) / fConst1) + 1.0f);
		fConst6 = (1.0f / fConst5);
		fConst7 = (fConst5 * fConst1);
		fConst8 = (1.0f / fConst7);
		fConst9 = (0 - fConst8);
		fTempPerm2 = 0;
		fConst10 = expf((0 - (100.0f / fConst0)));
		fConst11 = (1.0f - fConst10);
		iTempPerm3 = 0;
		iConst12 = int((0.0001f * fConst0));
		fConst13 = (0.84999999999999998f / fConst7);
		fConst14 = (1.0f / fConst0);
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		iTempPerm6 = 0;
		fTempPerm7 = 0;
		iTempPerm8 = 0;
		fConst15 = (6.9100000000000001f / fConst0);
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		iTempPerm12 = 0;
		iTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		iTempPerm17 = 0;
		iTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		iTempPerm22 = 0;
		iTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		iTempPerm27 = 0;
		iTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		iTempPerm32 = 0;
		iTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fConst16 = tanf((11359.999035380692f / fConst0));
		fConst17 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst16))));
		fConst18 = (1.0f / fConst16);
		fConst19 = (((fConst18 + -0.23156188491374319f) / fConst16) + 1.0f);
		fConst20 = (((fConst18 + 0.23156188491374319f) / fConst16) + 1.0f);
		fConst21 = (1.0f / fConst20);
		fConst22 = (fConst20 * fConst16);
		fConst23 = (1.0f / fConst22);
		fConst24 = (0 - fConst23);
		fTempPerm36 = 0;
		iTempPerm37 = 0;
		fConst25 = (0.90000000000000002f / fConst22);
		fConst26 = tanf((8959.82224803809f / fConst0));
		fConst27 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst26))));
		fConst28 = (1.0f / fConst26);
		fConst29 = (((fConst28 + -0.23156188491374319f) / fConst26) + 1.0f);
		fConst30 = (((fConst28 + 0.23156188491374319f) / fConst26) + 1.0f);
		fConst31 = (1.0f / fConst30);
		fConst32 = (fConst30 * fConst26);
		fConst33 = (1.0f / fConst32);
		fConst34 = (0 - fConst33);
		fTempPerm38 = 0;
		iTempPerm39 = 0;
		fConst35 = (0.94999999999999996f / fConst32);
		fConst36 = tanf((7099.9993971129325f / fConst0));
		fConst37 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst36))));
		fConst38 = (1.0f / fConst36);
		fConst39 = (((fConst38 + -0.23156188491374319f) / fConst36) + 1.0f);
		fConst40 = (((fConst38 + 0.23156188491374319f) / fConst36) + 1.0f);
		fConst41 = (1.0f / fConst40);
		fConst42 = (fConst40 * fConst36);
		fConst43 = (1.0f / fConst42);
		fConst44 = (0 - fConst43);
		fTempPerm40 = 0;
		iTempPerm41 = 0;
		fConst45 = (0.84999999999999998f / fConst42);
		fConst46 = tanf((5679.9995176903458f / fConst0));
		fConst47 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst46))));
		fConst48 = (1.0f / fConst46);
		fConst49 = (((fConst48 + -0.23156188491374319f) / fConst46) + 1.0f);
		fConst50 = (((fConst48 + 0.23156188491374319f) / fConst46) + 1.0f);
		fConst51 = (1.0f / fConst50);
		fConst52 = (1.0f / (fConst50 * fConst46));
		fConst53 = (0 - fConst52);
		fTempPerm42 = 0;
		iTempPerm43 = 0;
		fConst54 = tanf((4508.1854579013534f / fConst0));
		fConst55 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst54))));
		fConst56 = (1.0f / fConst54);
		fConst57 = (((fConst56 + -0.23156188491374319f) / fConst54) + 1.0f);
		fConst58 = (((fConst56 + 0.23156188491374319f) / fConst54) + 1.0f);
		fConst59 = (1.0f / fConst58);
		fConst60 = (fConst58 * fConst54);
		fConst61 = (1.0f / fConst60);
		fConst62 = (0 - fConst61);
		fTempPerm44 = 0;
		iTempPerm45 = 0;
		fConst63 = (0.84999999999999998f / fConst60);
		fConst64 = tanf((3578.2740324387742f / fConst0));
		fConst65 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst64))));
		fConst66 = (1.0f / fConst64);
		fConst67 = (((fConst66 + -0.23156188491374319f) / fConst64) + 1.0f);
		fConst68 = (((fConst66 + 0.23156188491374319f) / fConst64) + 1.0f);
		fConst69 = (1.0f / fConst68);
		fConst70 = (fConst68 * fConst64);
		fConst71 = (1.0f / fConst70);
		fConst72 = (0 - fConst71);
		fTempPerm46 = 0;
		iTempPerm47 = 0;
		fConst73 = (1.2f / fConst70);
		fConst74 = tanf((2839.9997588451729f / fConst0));
		fConst75 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst74))));
		fConst76 = (1.0f / fConst74);
		fConst77 = (((fConst76 + -0.23156188491374319f) / fConst74) + 1.0f);
		fConst78 = (((fConst76 + 0.23156188491374319f) / fConst74) + 1.0f);
		fConst79 = (1.0f / fConst78);
		fConst80 = (fConst78 * fConst74);
		fConst81 = (1.0f / fConst80);
		fConst82 = (0 - fConst81);
		fTempPerm48 = 0;
		iTempPerm49 = 0;
		fConst83 = (1.1000000000000001f / fConst80);
		fConst84 = tanf((2254.0927289506767f / fConst0));
		fConst85 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst84))));
		fConst86 = (1.0f / fConst84);
		fConst87 = (((fConst86 + -0.23156188491374319f) / fConst84) + 1.0f);
		fConst88 = (((fConst86 + 0.23156188491374319f) / fConst84) + 1.0f);
		fConst89 = (1.0f / fConst88);
		fConst90 = (1.0f / (fConst88 * fConst84));
		fConst91 = (0 - fConst90);
		fTempPerm50 = 0;
		iTempPerm51 = 0;
		fConst92 = tanf((1789.1370162193871f / fConst0));
		fConst93 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst92))));
		fConst94 = (1.0f / fConst92);
		fConst95 = (((fConst94 + -0.23156188491374319f) / fConst92) + 1.0f);
		fConst96 = (((fConst94 + 0.23156188491374319f) / fConst92) + 1.0f);
		fConst97 = (1.0f / fConst96);
		fConst98 = (fConst96 * fConst92);
		fConst99 = (1.0f / fConst98);
		fConst100 = (0 - fConst99);
		fTempPerm52 = 0;
		iTempPerm53 = 0;
		fConst101 = (1.3f / fConst98);
		fConst102 = tanf((1419.9998794225864f / fConst0));
		fConst103 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst102))));
		fConst104 = (1.0f / fConst102);
		fConst105 = (((fConst104 + -0.23156188491374319f) / fConst102) + 1.0f);
		fConst106 = (((fConst104 + 0.23156188491374319f) / fConst102) + 1.0f);
		fConst107 = (1.0f / fConst106);
		fConst108 = (fConst106 * fConst102);
		fConst109 = (1.0f / fConst108);
		fConst110 = (0 - fConst109);
		fTempPerm54 = 0;
		iTempPerm55 = 0;
		fConst111 = (1.3f / fConst108);
		fConst112 = tanf((1126.2609663119408f / fConst0));
		fConst113 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst112))));
		fConst114 = (1.0f / fConst112);
		fConst115 = (((fConst114 + -0.23156188491374319f) / fConst112) + 1.0f);
		fConst116 = (((fConst114 + 0.23156188491374319f) / fConst112) + 1.0f);
		fConst117 = (1.0f / fConst116);
		fConst118 = (fConst116 * fConst112);
		fConst119 = (1.0f / fConst118);
		fConst120 = (0 - fConst119);
		fTempPerm56 = 0;
		iTempPerm57 = 0;
		fConst121 = (1.3999999999999999f / fConst118);
		fConst122 = tanf((893.78310994629612f / fConst0));
		fConst123 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst122))));
		fConst124 = (1.0f / fConst122);
		fConst125 = (((fConst124 + -0.23156188491374319f) / fConst122) + 1.0f);
		fConst126 = (((fConst124 + 0.23156188491374319f) / fConst122) + 1.0f);
		fConst127 = (1.0f / fConst126);
		fConst128 = (fConst126 * fConst122);
		fConst129 = (1.0f / fConst128);
		fConst130 = (0 - fConst129);
		fTempPerm58 = 0;
		iTempPerm59 = 0;
		fConst131 = (1.5f / fConst128);
		fConst132 = tanf((709.99993971129322f / fConst0));
		fConst133 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst132))));
		fConst134 = (1.0f / fConst132);
		fConst135 = (((fConst134 + -0.23156188491374319f) / fConst132) + 1.0f);
		fConst136 = (((fConst134 + 0.23156188491374319f) / fConst132) + 1.0f);
		fConst137 = (1.0f / fConst136);
		fConst138 = (fConst136 * fConst132);
		fConst139 = (1.0f / fConst138);
		fConst140 = (0 - fConst139);
		fTempPerm60 = 0;
		iTempPerm61 = 0;
		fConst141 = (4.0f / fConst138);
		fConst142 = tanf((563.91588131936783f / fConst0));
		fConst143 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst142))));
		fConst144 = (1.0f / fConst142);
		fConst145 = (((fConst144 + -0.23156188491374319f) / fConst142) + 1.0f);
		fConst146 = (((fConst144 + 0.23156188491374319f) / fConst142) + 1.0f);
		fConst147 = (1.0f / fConst146);
		fConst148 = (fConst146 * fConst142);
		fConst149 = (1.0f / fConst148);
		fConst150 = (0 - fConst149);
		fTempPerm62 = 0;
		iTempPerm63 = 0;
		fConst151 = (5.0f / fConst148);
		fConst152 = tanf((328.2964323001334f / fConst0));
		fConst153 = (2.0f * (1.0f - (1.0f / faustpower<2>(fConst152))));
		fConst154 = (1.0f / fConst152);
		fConst155 = (((fConst154 + -0.23156188491374319f) / fConst152) + 1.0f);
		fConst156 = (((fConst154 + 0.23156188491374319f) / fConst152) + 1.0f);
		fConst157 = (1.0f / fConst156);
		fConst158 = (fConst156 * fConst152);
		fConst159 = (1.0f / fConst158);
		fConst160 = (0 - fConst159);
		fTempPerm64 = 0;
		iTempPerm65 = 0;
		fConst161 = (5.0f / fConst158);
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.5f;
		fslider1 = 0.5f;
		fslider2 = 440.0f;
		fslider3 = 0.0f;
		fslider4 = 0.0f;
		fslider5 = 0.0f;
		fslider6 = 0.001f;
		fbutton0 = 0.0;
		fslider7 = 1.0f;
		fslider8 = 1.0f;
		fslider9 = 440.0f;
		fbutton1 = 0.0;
		fslider10 = 1.0f;
		fslider11 = 440.0f;
		fbutton2 = 0.0;
		fslider12 = 1.0f;
		fslider13 = 440.0f;
		fbutton3 = 0.0;
		fslider14 = 1.0f;
		fslider15 = 440.0f;
		fbutton4 = 0.0;
		fslider16 = 1.0f;
		fslider17 = 440.0f;
		fbutton5 = 0.0;
		fslider18 = 1.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) iRec8[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) iRec12[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) iRec15[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) iRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) iRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) iRec27[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) iRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) iRec35[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec9[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) iVec1[i] = 0;
		for (int i=0; i<2; i++) iRec42[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) iVec2[i] = 0;
		for (int i=0; i<2; i++) iRec50[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) iVec3[i] = 0;
		for (int i=0; i<2; i++) iRec58[i] = 0;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) iVec4[i] = 0;
		for (int i=0; i<2; i++) iRec66[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<3; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<2; i++) iVec5[i] = 0;
		for (int i=0; i<2; i++) iRec74[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<3; i++) fRec75[i] = 0;
		for (int i=0; i<3; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		for (int i=0; i<2; i++) iVec6[i] = 0;
		for (int i=0; i<2; i++) iRec82[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<3; i++) fRec83[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<2; i++) iVec7[i] = 0;
		for (int i=0; i<2; i++) iRec90[i] = 0;
		for (int i=0; i<2; i++) fRec85[i] = 0;
		for (int i=0; i<3; i++) fRec91[i] = 0;
		for (int i=0; i<3; i++) fRec97[i] = 0;
		for (int i=0; i<2; i++) fRec96[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<2; i++) iVec8[i] = 0;
		for (int i=0; i<2; i++) iRec98[i] = 0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		for (int i=0; i<3; i++) fRec99[i] = 0;
		for (int i=0; i<3; i++) fRec105[i] = 0;
		for (int i=0; i<2; i++) fRec104[i] = 0;
		for (int i=0; i<2; i++) fRec103[i] = 0;
		for (int i=0; i<2; i++) iVec9[i] = 0;
		for (int i=0; i<2; i++) iRec106[i] = 0;
		for (int i=0; i<2; i++) fRec101[i] = 0;
		for (int i=0; i<3; i++) fRec107[i] = 0;
		for (int i=0; i<3; i++) fRec113[i] = 0;
		for (int i=0; i<2; i++) fRec112[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		for (int i=0; i<2; i++) iVec10[i] = 0;
		for (int i=0; i<2; i++) iRec114[i] = 0;
		for (int i=0; i<2; i++) fRec109[i] = 0;
		for (int i=0; i<3; i++) fRec115[i] = 0;
		for (int i=0; i<3; i++) fRec121[i] = 0;
		for (int i=0; i<2; i++) fRec120[i] = 0;
		for (int i=0; i<2; i++) fRec119[i] = 0;
		for (int i=0; i<2; i++) iVec11[i] = 0;
		for (int i=0; i<2; i++) iRec122[i] = 0;
		for (int i=0; i<2; i++) fRec117[i] = 0;
		for (int i=0; i<3; i++) fRec123[i] = 0;
		for (int i=0; i<3; i++) fRec129[i] = 0;
		for (int i=0; i<2; i++) fRec128[i] = 0;
		for (int i=0; i<2; i++) fRec127[i] = 0;
		for (int i=0; i<2; i++) iVec12[i] = 0;
		for (int i=0; i<2; i++) iRec130[i] = 0;
		for (int i=0; i<2; i++) fRec125[i] = 0;
		for (int i=0; i<3; i++) fRec131[i] = 0;
		for (int i=0; i<3; i++) fRec137[i] = 0;
		for (int i=0; i<2; i++) fRec136[i] = 0;
		for (int i=0; i<2; i++) fRec135[i] = 0;
		for (int i=0; i<2; i++) iVec13[i] = 0;
		for (int i=0; i<2; i++) iRec138[i] = 0;
		for (int i=0; i<2; i++) fRec133[i] = 0;
		for (int i=0; i<3; i++) fRec139[i] = 0;
		for (int i=0; i<3; i++) fRec145[i] = 0;
		for (int i=0; i<2; i++) fRec144[i] = 0;
		for (int i=0; i<2; i++) fRec143[i] = 0;
		for (int i=0; i<2; i++) iVec14[i] = 0;
		for (int i=0; i<2; i++) iRec146[i] = 0;
		for (int i=0; i<2; i++) fRec141[i] = 0;
		for (int i=0; i<3; i++) fRec147[i] = 0;
		for (int i=0; i<3; i++) fRec153[i] = 0;
		for (int i=0; i<2; i++) fRec152[i] = 0;
		for (int i=0; i<2; i++) fRec151[i] = 0;
		for (int i=0; i<2; i++) iVec15[i] = 0;
		for (int i=0; i<2; i++) iRec154[i] = 0;
		for (int i=0; i<2; i++) fRec149[i] = 0;
		for (int i=0; i<3; i++) fRec155[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual faust_vocoder* clone() {
		return new faust_vocoder();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("vocoder");
		ui_interface->openVerticalBox("envelope");
		ui_interface->addHorizontalSlider("Attack", &fslider6, 0.001f, 0.001f, 4.0f, 0.001f);
		ui_interface->addHorizontalSlider("Decay", &fslider5, 0.0f, 0.0f, 4.0f, 0.001f);
		ui_interface->addHorizontalSlider("Release", &fslider4, 0.0f, 0.0f, 4.0f, 0.01f);
		ui_interface->addHorizontalSlider("Sustain", &fslider7, 1.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->addHorizontalSlider("gateamount", &fslider1, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->addHorizontalSlider("mix", &fslider0, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->addHorizontalSlider("noise", &fslider3, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->openHorizontalBox("voices");
		ui_interface->openVerticalBox("0");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider17, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton5);
		ui_interface->addHorizontalSlider("velocity", &fslider18, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("1");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider13, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton3);
		ui_interface->addHorizontalSlider("velocity", &fslider14, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("2");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider9, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton1);
		ui_interface->addHorizontalSlider("velocity", &fslider10, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("3");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider15, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton4);
		ui_interface->addHorizontalSlider("velocity", &fslider16, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("4");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider11, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton2);
		ui_interface->addHorizontalSlider("velocity", &fslider12, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("5");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider2, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton0);
		ui_interface->addHorizontalSlider("velocity", &fslider8, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow2 = max(9.9999999999999995e-08f, fabsf(float(fslider2)));
		float 	fSlow3 = (fConst14 * fSlow2);
		float 	fSlow4 = (1.0f - (fConst0 / fSlow2));
		float 	fSlow5 = (3.0000000000000024e-05f * float(fslider3));
		float 	fSlow6 = float(fslider4);
		float 	fSlow7 = float(fslider5);
		float 	fSlow8 = float(fslider6);
		float 	fSlow9 = (6.9100000000000001f * fSlow8);
		int 	iSlow10 = int((fConst0 * fSlow8));
		int 	iSlow11 = (float(fbutton0) > 0.0f);
		int 	iSlow12 = int(iSlow11);
		float 	fSlow13 = float(fslider7);
		float 	fSlow14 = (float(iSlow11) * fSlow13);
		float 	fSlow15 = float(fslider8);
		float 	fSlow16 = max(9.9999999999999995e-08f, fabsf(float(fslider9)));
		float 	fSlow17 = (fConst14 * fSlow16);
		float 	fSlow18 = (1.0f - (fConst0 / fSlow16));
		int 	iSlow19 = (float(fbutton1) > 0.0f);
		int 	iSlow20 = int(iSlow19);
		float 	fSlow21 = (float(iSlow19) * fSlow13);
		float 	fSlow22 = float(fslider10);
		float 	fSlow23 = max(9.9999999999999995e-08f, fabsf(float(fslider11)));
		float 	fSlow24 = (fConst14 * fSlow23);
		float 	fSlow25 = (1.0f - (fConst0 / fSlow23));
		int 	iSlow26 = (float(fbutton2) > 0.0f);
		int 	iSlow27 = int(iSlow26);
		float 	fSlow28 = (float(iSlow26) * fSlow13);
		float 	fSlow29 = float(fslider12);
		float 	fSlow30 = max(9.9999999999999995e-08f, fabsf(float(fslider13)));
		float 	fSlow31 = (fConst14 * fSlow30);
		float 	fSlow32 = (1.0f - (fConst0 / fSlow30));
		int 	iSlow33 = (float(fbutton3) > 0.0f);
		int 	iSlow34 = int(iSlow33);
		float 	fSlow35 = (float(iSlow33) * fSlow13);
		float 	fSlow36 = float(fslider14);
		float 	fSlow37 = max(9.9999999999999995e-08f, fabsf(float(fslider15)));
		float 	fSlow38 = (fConst14 * fSlow37);
		float 	fSlow39 = (1.0f - (fConst0 / fSlow37));
		int 	iSlow40 = (float(fbutton4) > 0.0f);
		int 	iSlow41 = int(iSlow40);
		float 	fSlow42 = (float(iSlow40) * fSlow13);
		float 	fSlow43 = float(fslider16);
		float 	fSlow44 = max(9.9999999999999995e-08f, fabsf(float(fslider17)));
		float 	fSlow45 = (fConst14 * fSlow44);
		float 	fSlow46 = (1.0f - (fConst0 / fSlow44));
		int 	iSlow47 = (float(fbutton5) > 0.0f);
		int 	iSlow48 = int(iSlow47);
		float 	fSlow49 = (float(iSlow47) * fSlow13);
		float 	fSlow50 = float(fslider18);
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			fTempPerm0 = (float)input0[i];
			fRec0[0] = (fSlow0 + (0.999f * fRec0[1]));
			fRec3[0] = (fSlow1 + (0.999f * fRec3[1]));
			fTempPerm1 = powf(10,(0.050000000000000003f * ((20.0f * fRec3[0]) + -40.0f)));
			fRec7[0] = (fTempPerm0 - (fConst6 * ((fConst4 * fRec7[2]) + (fConst2 * fRec7[1]))));
			fTempPerm2 = fabsf(((fConst8 * fRec7[0]) + (fConst9 * fRec7[2])));
			fRec6[0] = max(fTempPerm2, ((fConst10 * fRec6[1]) + (fConst11 * fTempPerm2)));
			fRec5[0] = ((fConst10 * fRec5[1]) + (fConst11 * fabsf(fRec6[0])));
			float 	fRec4 = fRec5[0];
			iTempPerm3 = (fRec4 > fTempPerm1);
			iVec0[0] = iTempPerm3;
			iRec8[0] = max((int)(iConst12 * (iVec0[0] < iVec0[1])), (int)(iRec8[1] + -1));
			fRec2[0] = ((fConst10 * fRec2[1]) + (fConst11 * fabsf(max(float(iVec0[0]), (float)(iRec8[0] > 0)))));
			float 	fRec1 = fRec2[0];
			fTempPerm4 = (fSlow3 + (fRec10[1] + -1.0f));
			fTempPerm5 = (fSlow3 + fRec10[1]);
			iTempPerm6 = int((fTempPerm4 < 0.0f));
			fRec10[0] = ((iTempPerm6)?fTempPerm5:fTempPerm4);
			float 	fRec11 = ((iTempPerm6)?fTempPerm5:(fSlow3 + (fRec10[1] + (fSlow4 * fTempPerm4))));
			iRec12[0] = ((1103515245 * iRec12[1]) + 12345);
			fRec13[0] = (fSlow5 + (0.999f * fRec13[1]));
			fTempPerm7 = (4.6566128752457969e-10f * (fRec13[0] * float(iRec12[0])));
			iRec15[0] = (iSlow11 * (iRec15[1] + 1));
			iTempPerm8 = int((iRec15[0] < iSlow10));
			fTempPerm9 = expf((0 - (fConst15 / ((iSlow12)?((iTempPerm8)?fSlow9:fSlow7):fSlow6))));
			fRec14[0] = ((fRec14[1] * fTempPerm9) + (((iSlow12)?((iTempPerm8)?1.5873015873015872f:fSlow14):0.0f) * (1.0f - fTempPerm9)));
			fTempPerm10 = (fSlow17 + (fRec16[1] + -1.0f));
			fTempPerm11 = (fSlow17 + fRec16[1]);
			iTempPerm12 = int((fTempPerm10 < 0.0f));
			fRec16[0] = ((iTempPerm12)?fTempPerm11:fTempPerm10);
			float 	fRec17 = ((iTempPerm12)?fTempPerm11:(fSlow17 + (fRec16[1] + (fSlow18 * fTempPerm10))));
			iRec19[0] = (iSlow19 * (iRec19[1] + 1));
			iTempPerm13 = int((iRec19[0] < iSlow10));
			fTempPerm14 = expf((0 - (fConst15 / ((iSlow20)?((iTempPerm13)?fSlow9:fSlow7):fSlow6))));
			fRec18[0] = ((fRec18[1] * fTempPerm14) + (((iSlow20)?((iTempPerm13)?1.5873015873015872f:fSlow21):0.0f) * (1.0f - fTempPerm14)));
			fTempPerm15 = (fSlow24 + (fRec20[1] + -1.0f));
			fTempPerm16 = (fSlow24 + fRec20[1]);
			iTempPerm17 = int((fTempPerm15 < 0.0f));
			fRec20[0] = ((iTempPerm17)?fTempPerm16:fTempPerm15);
			float 	fRec21 = ((iTempPerm17)?fTempPerm16:(fSlow24 + (fRec20[1] + (fSlow25 * fTempPerm15))));
			iRec23[0] = (iSlow26 * (iRec23[1] + 1));
			iTempPerm18 = int((iRec23[0] < iSlow10));
			fTempPerm19 = expf((0 - (fConst15 / ((iSlow27)?((iTempPerm18)?fSlow9:fSlow7):fSlow6))));
			fRec22[0] = ((fRec22[1] * fTempPerm19) + (((iSlow27)?((iTempPerm18)?1.5873015873015872f:fSlow28):0.0f) * (1.0f - fTempPerm19)));
			fTempPerm20 = (fSlow31 + (fRec24[1] + -1.0f));
			fTempPerm21 = (fSlow31 + fRec24[1]);
			iTempPerm22 = int((fTempPerm20 < 0.0f));
			fRec24[0] = ((iTempPerm22)?fTempPerm21:fTempPerm20);
			float 	fRec25 = ((iTempPerm22)?fTempPerm21:(fSlow31 + (fRec24[1] + (fSlow32 * fTempPerm20))));
			iRec27[0] = (iSlow33 * (iRec27[1] + 1));
			iTempPerm23 = int((iRec27[0] < iSlow10));
			fTempPerm24 = expf((0 - (fConst15 / ((iSlow34)?((iTempPerm23)?fSlow9:fSlow7):fSlow6))));
			fRec26[0] = ((fRec26[1] * fTempPerm24) + (((iSlow34)?((iTempPerm23)?1.5873015873015872f:fSlow35):0.0f) * (1.0f - fTempPerm24)));
			fTempPerm25 = (fSlow38 + (fRec28[1] + -1.0f));
			fTempPerm26 = (fSlow38 + fRec28[1]);
			iTempPerm27 = int((fTempPerm25 < 0.0f));
			fRec28[0] = ((iTempPerm27)?fTempPerm26:fTempPerm25);
			float 	fRec29 = ((iTempPerm27)?fTempPerm26:(fSlow38 + (fRec28[1] + (fSlow39 * fTempPerm25))));
			iRec31[0] = (iSlow40 * (iRec31[1] + 1));
			iTempPerm28 = int((iRec31[0] < iSlow10));
			fTempPerm29 = expf((0 - (fConst15 / ((iSlow41)?((iTempPerm28)?fSlow9:fSlow7):fSlow6))));
			fRec30[0] = ((fRec30[1] * fTempPerm29) + (((iSlow41)?((iTempPerm28)?1.5873015873015872f:fSlow42):0.0f) * (1.0f - fTempPerm29)));
			fTempPerm30 = (fSlow45 + (fRec32[1] + -1.0f));
			fTempPerm31 = (fSlow45 + fRec32[1]);
			iTempPerm32 = int((fTempPerm30 < 0.0f));
			fRec32[0] = ((iTempPerm32)?fTempPerm31:fTempPerm30);
			float 	fRec33 = ((iTempPerm32)?fTempPerm31:(fSlow45 + (fRec32[1] + (fSlow46 * fTempPerm30))));
			iRec35[0] = (iSlow47 * (iRec35[1] + 1));
			iTempPerm33 = int((iRec35[0] < iSlow10));
			fTempPerm34 = expf((0 - (fConst15 / ((iSlow48)?((iTempPerm33)?fSlow9:fSlow7):fSlow6))));
			fRec34[0] = ((fRec34[1] * fTempPerm34) + (((iSlow48)?((iTempPerm33)?1.5873015873015872f:fSlow49):0.0f) * (1.0f - fTempPerm34)));
			fTempPerm35 = ((((((fSlow50 * (min(1.0f, fRec34[0]) * ((0.20000000000000001f * ((2.0f * fRec33) + -1.0f)) + fTempPerm7))) + (fSlow43 * (min(1.0f, fRec30[0]) * (fTempPerm7 + (0.20000000000000001f * ((2.0f * fRec29) + -1.0f)))))) + (fSlow36 * (min(1.0f, fRec26[0]) * (fTempPerm7 + (0.20000000000000001f * ((2.0f * fRec25) + -1.0f)))))) + (fSlow29 * (min(1.0f, fRec22[0]) * (fTempPerm7 + (0.20000000000000001f * ((2.0f * fRec21) + -1.0f)))))) + (fSlow22 * (min(1.0f, fRec18[0]) * (fTempPerm7 + (0.20000000000000001f * ((2.0f * fRec17) + -1.0f)))))) + (fSlow15 * (min(1.0f, fRec14[0]) * (fTempPerm7 + (0.20000000000000001f * ((2.0f * fRec11) + -1.0f))))));
			fRec9[0] = (fTempPerm35 - (fConst6 * ((fConst4 * fRec9[2]) + (fConst2 * fRec9[1]))));
			fRec41[0] = (fTempPerm0 - (fConst21 * ((fConst19 * fRec41[2]) + (fConst17 * fRec41[1]))));
			fTempPerm36 = fabsf(((fConst23 * fRec41[0]) + (fConst24 * fRec41[2])));
			fRec40[0] = max(fTempPerm36, ((fConst10 * fRec40[1]) + (fConst11 * fTempPerm36)));
			fRec39[0] = ((fConst10 * fRec39[1]) + (fConst11 * fabsf(fRec40[0])));
			float 	fRec38 = fRec39[0];
			iTempPerm37 = (fRec38 > fTempPerm1);
			iVec1[0] = iTempPerm37;
			iRec42[0] = max((int)(iConst12 * (iVec1[0] < iVec1[1])), (int)(iRec42[1] + -1));
			fRec37[0] = ((fConst10 * fRec37[1]) + (fConst11 * fabsf(max(float(iVec1[0]), (float)(iRec42[0] > 0)))));
			float 	fRec36 = fRec37[0];
			fRec43[0] = (fTempPerm35 - (fConst21 * ((fConst19 * fRec43[2]) + (fConst17 * fRec43[1]))));
			fRec49[0] = (fTempPerm0 - (fConst31 * ((fConst29 * fRec49[2]) + (fConst27 * fRec49[1]))));
			fTempPerm38 = fabsf(((fConst33 * fRec49[0]) + (fConst34 * fRec49[2])));
			fRec48[0] = max(fTempPerm38, ((fConst10 * fRec48[1]) + (fConst11 * fTempPerm38)));
			fRec47[0] = ((fConst10 * fRec47[1]) + (fConst11 * fabsf(fRec48[0])));
			float 	fRec46 = fRec47[0];
			iTempPerm39 = (fRec46 > fTempPerm1);
			iVec2[0] = iTempPerm39;
			iRec50[0] = max((int)(iConst12 * (iVec2[0] < iVec2[1])), (int)(iRec50[1] + -1));
			fRec45[0] = ((fConst10 * fRec45[1]) + (fConst11 * fabsf(max(float(iVec2[0]), (float)(iRec50[0] > 0)))));
			float 	fRec44 = fRec45[0];
			fRec51[0] = (fTempPerm35 - (fConst31 * ((fConst29 * fRec51[2]) + (fConst27 * fRec51[1]))));
			fRec57[0] = (fTempPerm0 - (fConst41 * ((fConst39 * fRec57[2]) + (fConst37 * fRec57[1]))));
			fTempPerm40 = fabsf(((fConst43 * fRec57[0]) + (fConst44 * fRec57[2])));
			fRec56[0] = max(fTempPerm40, ((fConst10 * fRec56[1]) + (fConst11 * fTempPerm40)));
			fRec55[0] = ((fConst10 * fRec55[1]) + (fConst11 * fabsf(fRec56[0])));
			float 	fRec54 = fRec55[0];
			iTempPerm41 = (fRec54 > fTempPerm1);
			iVec3[0] = iTempPerm41;
			iRec58[0] = max((int)(iConst12 * (iVec3[0] < iVec3[1])), (int)(iRec58[1] + -1));
			fRec53[0] = ((fConst10 * fRec53[1]) + (fConst11 * fabsf(max(float(iVec3[0]), (float)(iRec58[0] > 0)))));
			float 	fRec52 = fRec53[0];
			fRec59[0] = (fTempPerm35 - (fConst41 * ((fConst39 * fRec59[2]) + (fConst37 * fRec59[1]))));
			fRec65[0] = (fTempPerm0 - (fConst51 * ((fConst49 * fRec65[2]) + (fConst47 * fRec65[1]))));
			fTempPerm42 = fabsf(((fConst52 * fRec65[0]) + (fConst53 * fRec65[2])));
			fRec64[0] = max(fTempPerm42, ((fConst10 * fRec64[1]) + (fConst11 * fTempPerm42)));
			fRec63[0] = ((fConst10 * fRec63[1]) + (fConst11 * fabsf(fRec64[0])));
			float 	fRec62 = fRec63[0];
			iTempPerm43 = (fRec62 > fTempPerm1);
			iVec4[0] = iTempPerm43;
			iRec66[0] = max((int)(iConst12 * (iVec4[0] < iVec4[1])), (int)(iRec66[1] + -1));
			fRec61[0] = ((fConst10 * fRec61[1]) + (fConst11 * fabsf(max(float(iVec4[0]), (float)(iRec66[0] > 0)))));
			float 	fRec60 = fRec61[0];
			fRec67[0] = (fTempPerm35 - (fConst51 * ((fConst49 * fRec67[2]) + (fConst47 * fRec67[1]))));
			fRec73[0] = (fTempPerm0 - (fConst59 * ((fConst57 * fRec73[2]) + (fConst55 * fRec73[1]))));
			fTempPerm44 = fabsf(((fConst61 * fRec73[0]) + (fConst62 * fRec73[2])));
			fRec72[0] = max(fTempPerm44, ((fConst10 * fRec72[1]) + (fConst11 * fTempPerm44)));
			fRec71[0] = ((fConst10 * fRec71[1]) + (fConst11 * fabsf(fRec72[0])));
			float 	fRec70 = fRec71[0];
			iTempPerm45 = (fRec70 > fTempPerm1);
			iVec5[0] = iTempPerm45;
			iRec74[0] = max((int)(iConst12 * (iVec5[0] < iVec5[1])), (int)(iRec74[1] + -1));
			fRec69[0] = ((fConst10 * fRec69[1]) + (fConst11 * fabsf(max(float(iVec5[0]), (float)(iRec74[0] > 0)))));
			float 	fRec68 = fRec69[0];
			fRec75[0] = (fTempPerm35 - (fConst59 * ((fConst57 * fRec75[2]) + (fConst55 * fRec75[1]))));
			fRec81[0] = (fTempPerm0 - (fConst69 * ((fConst67 * fRec81[2]) + (fConst65 * fRec81[1]))));
			fTempPerm46 = fabsf(((fConst71 * fRec81[0]) + (fConst72 * fRec81[2])));
			fRec80[0] = max(fTempPerm46, ((fConst10 * fRec80[1]) + (fConst11 * fTempPerm46)));
			fRec79[0] = ((fConst10 * fRec79[1]) + (fConst11 * fabsf(fRec80[0])));
			float 	fRec78 = fRec79[0];
			iTempPerm47 = (fRec78 > fTempPerm1);
			iVec6[0] = iTempPerm47;
			iRec82[0] = max((int)(iConst12 * (iVec6[0] < iVec6[1])), (int)(iRec82[1] + -1));
			fRec77[0] = ((fConst10 * fRec77[1]) + (fConst11 * fabsf(max(float(iVec6[0]), (float)(iRec82[0] > 0)))));
			float 	fRec76 = fRec77[0];
			fRec83[0] = (fTempPerm35 - (fConst69 * ((fConst67 * fRec83[2]) + (fConst65 * fRec83[1]))));
			fRec89[0] = (fTempPerm0 - (fConst79 * ((fConst77 * fRec89[2]) + (fConst75 * fRec89[1]))));
			fTempPerm48 = fabsf(((fConst81 * fRec89[0]) + (fConst82 * fRec89[2])));
			fRec88[0] = max(fTempPerm48, ((fConst10 * fRec88[1]) + (fConst11 * fTempPerm48)));
			fRec87[0] = ((fConst10 * fRec87[1]) + (fConst11 * fabsf(fRec88[0])));
			float 	fRec86 = fRec87[0];
			iTempPerm49 = (fRec86 > fTempPerm1);
			iVec7[0] = iTempPerm49;
			iRec90[0] = max((int)(iConst12 * (iVec7[0] < iVec7[1])), (int)(iRec90[1] + -1));
			fRec85[0] = ((fConst10 * fRec85[1]) + (fConst11 * fabsf(max(float(iVec7[0]), (float)(iRec90[0] > 0)))));
			float 	fRec84 = fRec85[0];
			fRec91[0] = (fTempPerm35 - (fConst79 * ((fConst77 * fRec91[2]) + (fConst75 * fRec91[1]))));
			fRec97[0] = (fTempPerm0 - (fConst89 * ((fConst87 * fRec97[2]) + (fConst85 * fRec97[1]))));
			fTempPerm50 = fabsf(((fConst90 * fRec97[0]) + (fConst91 * fRec97[2])));
			fRec96[0] = max(fTempPerm50, ((fConst10 * fRec96[1]) + (fConst11 * fTempPerm50)));
			fRec95[0] = ((fConst10 * fRec95[1]) + (fConst11 * fabsf(fRec96[0])));
			float 	fRec94 = fRec95[0];
			iTempPerm51 = (fRec94 > fTempPerm1);
			iVec8[0] = iTempPerm51;
			iRec98[0] = max((int)(iConst12 * (iVec8[0] < iVec8[1])), (int)(iRec98[1] + -1));
			fRec93[0] = ((fConst10 * fRec93[1]) + (fConst11 * fabsf(max(float(iVec8[0]), (float)(iRec98[0] > 0)))));
			float 	fRec92 = fRec93[0];
			fRec99[0] = (fTempPerm35 - (fConst89 * ((fConst87 * fRec99[2]) + (fConst85 * fRec99[1]))));
			fRec105[0] = (fTempPerm0 - (fConst97 * ((fConst95 * fRec105[2]) + (fConst93 * fRec105[1]))));
			fTempPerm52 = fabsf(((fConst99 * fRec105[0]) + (fConst100 * fRec105[2])));
			fRec104[0] = max(fTempPerm52, ((fConst10 * fRec104[1]) + (fConst11 * fTempPerm52)));
			fRec103[0] = ((fConst10 * fRec103[1]) + (fConst11 * fabsf(fRec104[0])));
			float 	fRec102 = fRec103[0];
			iTempPerm53 = (fRec102 > fTempPerm1);
			iVec9[0] = iTempPerm53;
			iRec106[0] = max((int)(iConst12 * (iVec9[0] < iVec9[1])), (int)(iRec106[1] + -1));
			fRec101[0] = ((fConst10 * fRec101[1]) + (fConst11 * fabsf(max(float(iVec9[0]), (float)(iRec106[0] > 0)))));
			float 	fRec100 = fRec101[0];
			fRec107[0] = (fTempPerm35 - (fConst97 * ((fConst95 * fRec107[2]) + (fConst93 * fRec107[1]))));
			fRec113[0] = (fTempPerm0 - (fConst107 * ((fConst105 * fRec113[2]) + (fConst103 * fRec113[1]))));
			fTempPerm54 = fabsf(((fConst109 * fRec113[0]) + (fConst110 * fRec113[2])));
			fRec112[0] = max(fTempPerm54, ((fConst10 * fRec112[1]) + (fConst11 * fTempPerm54)));
			fRec111[0] = ((fConst10 * fRec111[1]) + (fConst11 * fabsf(fRec112[0])));
			float 	fRec110 = fRec111[0];
			iTempPerm55 = (fRec110 > fTempPerm1);
			iVec10[0] = iTempPerm55;
			iRec114[0] = max((int)(iConst12 * (iVec10[0] < iVec10[1])), (int)(iRec114[1] + -1));
			fRec109[0] = ((fConst10 * fRec109[1]) + (fConst11 * fabsf(max(float(iVec10[0]), (float)(iRec114[0] > 0)))));
			float 	fRec108 = fRec109[0];
			fRec115[0] = (fTempPerm35 - (fConst107 * ((fConst105 * fRec115[2]) + (fConst103 * fRec115[1]))));
			fRec121[0] = (fTempPerm0 - (fConst117 * ((fConst115 * fRec121[2]) + (fConst113 * fRec121[1]))));
			fTempPerm56 = fabsf(((fConst119 * fRec121[0]) + (fConst120 * fRec121[2])));
			fRec120[0] = max(fTempPerm56, ((fConst10 * fRec120[1]) + (fConst11 * fTempPerm56)));
			fRec119[0] = ((fConst10 * fRec119[1]) + (fConst11 * fabsf(fRec120[0])));
			float 	fRec118 = fRec119[0];
			iTempPerm57 = (fRec118 > fTempPerm1);
			iVec11[0] = iTempPerm57;
			iRec122[0] = max((int)(iConst12 * (iVec11[0] < iVec11[1])), (int)(iRec122[1] + -1));
			fRec117[0] = ((fConst10 * fRec117[1]) + (fConst11 * fabsf(max(float(iVec11[0]), (float)(iRec122[0] > 0)))));
			float 	fRec116 = fRec117[0];
			fRec123[0] = (fTempPerm35 - (fConst117 * ((fConst115 * fRec123[2]) + (fConst113 * fRec123[1]))));
			fRec129[0] = (fTempPerm0 - (fConst127 * ((fConst125 * fRec129[2]) + (fConst123 * fRec129[1]))));
			fTempPerm58 = fabsf(((fConst129 * fRec129[0]) + (fConst130 * fRec129[2])));
			fRec128[0] = max(fTempPerm58, ((fConst10 * fRec128[1]) + (fConst11 * fTempPerm58)));
			fRec127[0] = ((fConst10 * fRec127[1]) + (fConst11 * fabsf(fRec128[0])));
			float 	fRec126 = fRec127[0];
			iTempPerm59 = (fRec126 > fTempPerm1);
			iVec12[0] = iTempPerm59;
			iRec130[0] = max((int)(iConst12 * (iVec12[0] < iVec12[1])), (int)(iRec130[1] + -1));
			fRec125[0] = ((fConst10 * fRec125[1]) + (fConst11 * fabsf(max(float(iVec12[0]), (float)(iRec130[0] > 0)))));
			float 	fRec124 = fRec125[0];
			fRec131[0] = (fTempPerm35 - (fConst127 * ((fConst125 * fRec131[2]) + (fConst123 * fRec131[1]))));
			fRec137[0] = (fTempPerm0 - (fConst137 * ((fConst135 * fRec137[2]) + (fConst133 * fRec137[1]))));
			fTempPerm60 = fabsf(((fConst139 * fRec137[0]) + (fConst140 * fRec137[2])));
			fRec136[0] = max(fTempPerm60, ((fConst10 * fRec136[1]) + (fConst11 * fTempPerm60)));
			fRec135[0] = ((fConst10 * fRec135[1]) + (fConst11 * fabsf(fRec136[0])));
			float 	fRec134 = fRec135[0];
			iTempPerm61 = (fRec134 > fTempPerm1);
			iVec13[0] = iTempPerm61;
			iRec138[0] = max((int)(iConst12 * (iVec13[0] < iVec13[1])), (int)(iRec138[1] + -1));
			fRec133[0] = ((fConst10 * fRec133[1]) + (fConst11 * fabsf(max(float(iVec13[0]), (float)(iRec138[0] > 0)))));
			float 	fRec132 = fRec133[0];
			fRec139[0] = (fTempPerm35 - (fConst137 * ((fConst135 * fRec139[2]) + (fConst133 * fRec139[1]))));
			fRec145[0] = (fTempPerm0 - (fConst147 * ((fConst145 * fRec145[2]) + (fConst143 * fRec145[1]))));
			fTempPerm62 = fabsf(((fConst149 * fRec145[0]) + (fConst150 * fRec145[2])));
			fRec144[0] = max(fTempPerm62, ((fConst10 * fRec144[1]) + (fConst11 * fTempPerm62)));
			fRec143[0] = ((fConst10 * fRec143[1]) + (fConst11 * fabsf(fRec144[0])));
			float 	fRec142 = fRec143[0];
			iTempPerm63 = (fRec142 > fTempPerm1);
			iVec14[0] = iTempPerm63;
			iRec146[0] = max((int)(iConst12 * (iVec14[0] < iVec14[1])), (int)(iRec146[1] + -1));
			fRec141[0] = ((fConst10 * fRec141[1]) + (fConst11 * fabsf(max(float(iVec14[0]), (float)(iRec146[0] > 0)))));
			float 	fRec140 = fRec141[0];
			fRec147[0] = (fTempPerm35 - (fConst147 * ((fConst145 * fRec147[2]) + (fConst143 * fRec147[1]))));
			fRec153[0] = (fTempPerm0 - (fConst157 * ((fConst155 * fRec153[2]) + (fConst153 * fRec153[1]))));
			fTempPerm64 = fabsf(((fConst159 * fRec153[0]) + (fConst160 * fRec153[2])));
			fRec152[0] = max(fTempPerm64, ((fConst10 * fRec152[1]) + (fConst11 * fTempPerm64)));
			fRec151[0] = ((fConst10 * fRec151[1]) + (fConst11 * fabsf(fRec152[0])));
			float 	fRec150 = fRec151[0];
			iTempPerm65 = (fRec150 > fTempPerm1);
			iVec15[0] = iTempPerm65;
			iRec154[0] = max((int)(iConst12 * (iVec15[0] < iVec15[1])), (int)(iRec154[1] + -1));
			fRec149[0] = ((fConst10 * fRec149[1]) + (fConst11 * fabsf(max(float(iVec15[0]), (float)(iRec154[0] > 0)))));
			float 	fRec148 = fRec149[0];
			fRec155[0] = (fTempPerm35 - (fConst157 * ((fConst155 * fRec155[2]) + (fConst153 * fRec155[1]))));
			output0[i] = (FAUSTFLOAT)((((((((((((((((0.40000000000000002f * ((fConst161 * ((fRec155[0] * fRec152[0]) * fRec148)) + (fRec155[2] * (0 - (fConst161 * (fRec152[0] * fRec148)))))) + (0.84999999999999998f * ((fConst151 * ((fRec147[0] * fRec144[0]) * fRec140)) + (fRec147[2] * (0 - (fConst151 * (fRec144[0] * fRec140))))))) + (1.1000000000000001f * ((fConst141 * ((fRec139[0] * fRec136[0]) * fRec132)) + (fRec139[2] * (0 - (fConst141 * (fRec136[0] * fRec132))))))) + (1.3500000000000001f * ((fConst131 * ((fRec131[0] * fRec128[0]) * fRec124)) + (fRec131[2] * (0 - (fConst131 * (fRec128[0] * fRec124))))))) + (1.55f * ((fConst121 * ((fRec123[0] * fRec120[0]) * fRec116)) + (fRec123[2] * (0 - (fConst121 * (fRec120[0] * fRec116))))))) + (1.8f * ((fConst111 * ((fRec115[0] * fRec112[0]) * fRec108)) + (fRec115[2] * (0 - (fConst111 * (fRec112[0] * fRec108))))))) + (2.0f * ((fConst101 * ((fRec107[0] * fRec104[0]) * fRec100)) + (fRec107[2] * (0 - (fConst101 * (fRec104[0] * fRec100))))))) + (2.25f * ((fConst90 * ((fRec99[0] * fRec96[0]) * fRec92)) + (fRec99[2] * (0 - (fConst90 * (fRec96[0] * fRec92))))))) + (2.5f * ((fConst83 * ((fRec91[0] * fRec88[0]) * fRec84)) + (fRec91[2] * (0 - (fConst83 * (fRec88[0] * fRec84))))))) + (2.75f * ((fConst73 * ((fRec83[0] * fRec80[0]) * fRec76)) + (fRec83[2] * (0 - (fConst73 * (fRec80[0] * fRec76))))))) + (3.25f * ((fConst63 * ((fRec75[0] * fRec72[0]) * fRec68)) + (fRec75[2] * (0 - (fConst63 * (fRec72[0] * fRec68))))))) + (3.5f * ((fConst52 * ((fRec67[0] * fRec64[0]) * fRec60)) + (fRec67[2] * (0 - (fConst52 * (fRec64[0] * fRec60))))))) + (4.5f * (((fConst45 * ((fRec59[0] * fRec56[0]) * fRec52)) + (fRec59[2] * (0 - (fConst45 * (fRec56[0] * fRec52))))) + ((fConst35 * ((fRec51[0] * fRec48[0]) * fRec44)) + (fRec51[2] * (0 - (fConst35 * (fRec48[0] * fRec44)))))))) + (5.0f * ((fConst25 * ((fRec43[0] * fRec40[0]) * fRec36)) + (fRec43[2] * (0 - (fConst25 * (fRec40[0] * fRec36))))))) + (5.25f * ((fConst13 * ((fRec9[0] * fRec6[0]) * fRec1)) + (fRec9[2] * (0 - (fConst13 * (fRec6[0] * fRec1))))))) + (fRec0[0] * fTempPerm0));
			// post processing
			fRec155[2] = fRec155[1]; fRec155[1] = fRec155[0];
			fRec149[1] = fRec149[0];
			iRec154[1] = iRec154[0];
			iVec15[1] = iVec15[0];
			fRec151[1] = fRec151[0];
			fRec152[1] = fRec152[0];
			fRec153[2] = fRec153[1]; fRec153[1] = fRec153[0];
			fRec147[2] = fRec147[1]; fRec147[1] = fRec147[0];
			fRec141[1] = fRec141[0];
			iRec146[1] = iRec146[0];
			iVec14[1] = iVec14[0];
			fRec143[1] = fRec143[0];
			fRec144[1] = fRec144[0];
			fRec145[2] = fRec145[1]; fRec145[1] = fRec145[0];
			fRec139[2] = fRec139[1]; fRec139[1] = fRec139[0];
			fRec133[1] = fRec133[0];
			iRec138[1] = iRec138[0];
			iVec13[1] = iVec13[0];
			fRec135[1] = fRec135[0];
			fRec136[1] = fRec136[0];
			fRec137[2] = fRec137[1]; fRec137[1] = fRec137[0];
			fRec131[2] = fRec131[1]; fRec131[1] = fRec131[0];
			fRec125[1] = fRec125[0];
			iRec130[1] = iRec130[0];
			iVec12[1] = iVec12[0];
			fRec127[1] = fRec127[0];
			fRec128[1] = fRec128[0];
			fRec129[2] = fRec129[1]; fRec129[1] = fRec129[0];
			fRec123[2] = fRec123[1]; fRec123[1] = fRec123[0];
			fRec117[1] = fRec117[0];
			iRec122[1] = iRec122[0];
			iVec11[1] = iVec11[0];
			fRec119[1] = fRec119[0];
			fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec115[2] = fRec115[1]; fRec115[1] = fRec115[0];
			fRec109[1] = fRec109[0];
			iRec114[1] = iRec114[0];
			iVec10[1] = iVec10[0];
			fRec111[1] = fRec111[0];
			fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
			fRec101[1] = fRec101[0];
			iRec106[1] = iRec106[0];
			iVec9[1] = iVec9[0];
			fRec103[1] = fRec103[0];
			fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec99[2] = fRec99[1]; fRec99[1] = fRec99[0];
			fRec93[1] = fRec93[0];
			iRec98[1] = iRec98[0];
			iVec8[1] = iVec8[0];
			fRec95[1] = fRec95[0];
			fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec91[2] = fRec91[1]; fRec91[1] = fRec91[0];
			fRec85[1] = fRec85[0];
			iRec90[1] = iRec90[0];
			iVec7[1] = iVec7[0];
			fRec87[1] = fRec87[0];
			fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec83[2] = fRec83[1]; fRec83[1] = fRec83[0];
			fRec77[1] = fRec77[0];
			iRec82[1] = iRec82[0];
			iVec6[1] = iVec6[0];
			fRec79[1] = fRec79[0];
			fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec69[1] = fRec69[0];
			iRec74[1] = iRec74[0];
			iVec5[1] = iVec5[0];
			fRec71[1] = fRec71[0];
			fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec67[2] = fRec67[1]; fRec67[1] = fRec67[0];
			fRec61[1] = fRec61[0];
			iRec66[1] = iRec66[0];
			iVec4[1] = iVec4[0];
			fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec53[1] = fRec53[0];
			iRec58[1] = iRec58[0];
			iVec3[1] = iVec3[0];
			fRec55[1] = fRec55[0];
			fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec45[1] = fRec45[0];
			iRec50[1] = iRec50[0];
			iVec2[1] = iVec2[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec49[2] = fRec49[1]; fRec49[1] = fRec49[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec37[1] = fRec37[0];
			iRec42[1] = iRec42[0];
			iVec1[1] = iVec1[0];
			fRec39[1] = fRec39[0];
			fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec34[1] = fRec34[0];
			iRec35[1] = iRec35[0];
			fRec32[1] = fRec32[0];
			fRec30[1] = fRec30[0];
			iRec31[1] = iRec31[0];
			fRec28[1] = fRec28[0];
			fRec26[1] = fRec26[0];
			iRec27[1] = iRec27[0];
			fRec24[1] = fRec24[0];
			fRec22[1] = fRec22[0];
			iRec23[1] = iRec23[0];
			fRec20[1] = fRec20[0];
			fRec18[1] = fRec18[0];
			iRec19[1] = iRec19[0];
			fRec16[1] = fRec16[0];
			fRec14[1] = fRec14[0];
			iRec15[1] = iRec15[0];
			fRec13[1] = fRec13[0];
			iRec12[1] = iRec12[0];
			fRec10[1] = fRec10[0];
			fRec2[1] = fRec2[0];
			iRec8[1] = iRec8[0];
			iVec0[1] = iVec0[0];
			fRec5[1] = fRec5[0];
			fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			fRec3[1] = fRec3[0];
			fRec0[1] = fRec0[0];
		}
	}
};


